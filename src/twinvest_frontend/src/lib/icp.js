// src/twinvest_frontend/src/lib/icp.js
import { AuthClient } from '@dfinity/auth-client'
import { Actor, HttpAgent } from '@dfinity/agent'

// Declarations generated by `dfx generate role_registry`:
// Your repo printed: src/declarations/role_registry
import { idlFactory, canisterId } from '../../../declarations/role_registry'

export async function loginWithII() {
  const authClient = await AuthClient.create()
  return new Promise((resolve, reject) => {
    authClient.login({
      identityProvider: 'https://identity.ic0.app',
      onSuccess: async () => {
        const identity = authClient.getIdentity()
        const agent = new HttpAgent({ identity, host: 'http://127.0.0.1:4943' })
        try { await agent.fetchRootKey() } catch {}
        const actor = Actor.createActor(idlFactory, { agent, canisterId })
        resolve({ authClient, actor })
      },
      onError: reject,
    })
  })
}

export const roleVariant = (key) => {
  switch (key) {
    case 'sme': return { SME: null }
    case 'investor': return { Investor: null }
    case 'client': return { Client: null }
    case 'admin': return { Admin: null }
    default: return { SME: null }
  }
}

export const routeByRole = (role, navigate) => {
  if ('SME' in role) navigate('/dashboard/sme')
  else if ('Investor' in role) navigate('/dashboard/investor')
  else if ('Client' in role) navigate('/dashboard/client')
  else if ('Admin' in role) navigate('/dashboard/admin')
}
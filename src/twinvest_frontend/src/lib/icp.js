// src/twinvest_frontend/src/lib/icp.js
import { AuthClient } from '@dfinity/auth-client'
import { Actor, HttpAgent } from '@dfinity/agent'

// Declarations generated by `dfx generate role_registry`:
// Your repo printed: src/declarations/role_registry
// import { idlFactory, canisterId } from '../../../declarations/role_registry'

// Mock declarations for development - replace with actual declarations when available
const mockIdlFactory = {
  // Mock IDL factory - replace with your actual IDL
};

const mockCanisterId = "rdmx6-jaaaa-aaaah-qdrva-cai"; // Replace with your actual canister ID

// Use actual declarations if available, otherwise use mock
let idlFactory, canisterId;
try {
  const declarations = await import('../../../declarations/role_registry');
  idlFactory = declarations.idlFactory;
  canisterId = declarations.canisterId;
} catch (error) {
  console.warn('Using mock declarations. Make sure to run "dfx generate role_registry"');
  idlFactory = mockIdlFactory;
  canisterId = mockCanisterId;
}

// Environment detection
const isDevelopment = process.env.NODE_ENV === 'development' || window.location.hostname === 'localhost';
const IC_HOST = isDevelopment ? 'http://127.0.0.1:4943' : 'https://icp0.io';

export async function loginWithII() {
  try {
    const authClient = await AuthClient.create({
      idleOptions: {
        disableIdle: true,
        disableDefaultIdleCallback: true
      }
    });

    return new Promise((resolve, reject) => {
      authClient.login({
        identityProvider: isDevelopment 
          ? `http://127.0.0.1:4943/?canisterId=${process.env.CANISTER_ID_INTERNET_IDENTITY || 'rdmx6-jaaaa-aaaah-qdrva-cai'}`
          : 'https://identity.ic0.app',
        maxTimeToLive: BigInt(7 * 24 * 60 * 60 * 1000 * 1000 * 1000), // 7 days
        windowOpenerFeatures: 'toolbar=0,location=0,menubar=0,width=500,height=500,left=' + 
          (window.screen.width / 2 - 250) + ',top=' + (window.screen.height / 2 - 250),
        onSuccess: async () => {
          try {
            const identity = authClient.getIdentity();
            const agent = new HttpAgent({ 
              identity, 
              host: IC_HOST,
              retryTimes: 3
            });
            
            // Only fetch root key in development
            if (isDevelopment) {
              try { 
                await agent.fetchRootKey();
              } catch (e) {
                console.warn('Failed to fetch root key:', e);
              }
            }
            
            // Create actor with error handling
            let actor = null;
            try {
              actor = Actor.createActor(idlFactory, { 
                agent, 
                canisterId 
              });
            } catch (actorError) {
              console.warn('Failed to create actor, using mock:', actorError);
              // Create mock actor for testing
              actor = createMockActor();
            }
            
            resolve({ authClient, actor, identity, agent });
          } catch (setupError) {
            console.error('Setup error after login:', setupError);
            reject(setupError);
          }
        },
        onError: (error) => {
          console.error('ICP login failed:', error);
          reject(new Error('Failed to authenticate with Internet Computer'));
        },
      });
    });
  } catch (error) {
    console.error('Failed to create auth client:', error);
    throw new Error('Failed to initialize authentication');
  }
}

// Mock actor for development/testing
function createMockActor() {
  return {
    get_my_role: async () => {
      // Return empty array (no role set) or mock role
      const savedRole = localStorage.getItem('mockUserRole');
      if (savedRole) {
        return [roleVariant(savedRole)];
      }
      return [];
    },
    set_my_role: async (role) => {
      // Save role to localStorage for mock
      const roleKey = getRoleKey(role);
      localStorage.setItem('mockUserRole', roleKey);
      return { Ok: null };
    }
  };
}

export async function logout() {
  try {
    const authClient = await AuthClient.create();
    await authClient.logout();
    // Clear any stored user data
    localStorage.removeItem('userRole');
    localStorage.removeItem('userData');
    localStorage.removeItem('mockUserRole');
    return true;
  } catch (error) {
    console.error('Logout failed:', error);
    return false;
  }
}

export async function checkAuthentication() {
  try {
    const authClient = await AuthClient.create();
    const isAuthenticated = await authClient.isAuthenticated();
    
    // Also check for traditional auth (stored in localStorage)
    const hasTraditionalAuth = localStorage.getItem('isAuthenticated') === 'true';
    
    return isAuthenticated || hasTraditionalAuth;
  } catch (error) {
    console.error('Authentication check failed:', error);
    return false;
  }
}

export const roleVariant = (key) => {
  switch (key) {
    case 'sme': return { SME: null };
    case 'investor': return { Investor: null };
    case 'client': return { Client: null };
    case 'admin': return { Admin: null };
    default: return { SME: null };
  }
};

export const getRoleKey = (roleVariant) => {
  if (typeof roleVariant === 'string') return roleVariant;
  if ('SME' in roleVariant) return 'sme';
  if ('Investor' in roleVariant) return 'investor';
  if ('Client' in roleVariant) return 'client';
  if ('Admin' in roleVariant) return 'admin';
  return 'sme';
};

export const routeByRole = (role, navigate) => {
  const roleKey = getRoleKey(role);
  navigate(`/dashboard/${roleKey}`);
};

// Helper function to get current user role
export const getCurrentUserRole = async () => {
  try {
    const isAuthenticated = await checkAuthentication();
    if (!isAuthenticated) return null;

    // Try to get role from ICP first
    try {
      const { actor } = await loginWithII();
      const roleOpt = await actor.get_my_role();
      if (roleOpt.length) {
        return getRoleKey(roleOpt[0]);
      }
    } catch (icpError) {
      console.warn('Failed to get role from ICP:', icpError);
    }

    // Fallback to localStorage for traditional auth
    const savedRole = localStorage.getItem('selectedRole') || localStorage.getItem('mockUserRole');
    return savedRole;
    
  } catch (error) {
    console.error('Failed to get user role:', error);
    return null;
  }
};

// Helper function for traditional authentication
export const authenticateTraditional = async (credentials) => {
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Mock validation - replace with actual API call
    if (credentials.email && credentials.password) {
      localStorage.setItem('isAuthenticated', 'true');
      localStorage.setItem('userEmail', credentials.email);
      return { success: true, user: { email: credentials.email } };
    } else {
      throw new Error('Invalid credentials');
    }
  } catch (error) {
    throw new Error('Authentication failed');
  }
};

// Helper function for traditional registration
export const registerTraditional = async (userData) => {
  try {
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // Mock validation
    if (userData.email && userData.password && userData.firstName && userData.lastName) {
      localStorage.setItem('isAuthenticated', 'true');
      localStorage.setItem('userEmail', userData.email);
      localStorage.setItem('userName', `${userData.firstName} ${userData.lastName}`);
      return { success: true, user: userData };
    } else {
      throw new Error('Invalid user data');
    }
  } catch (error) {
    throw new Error('Registration failed');
  }
};